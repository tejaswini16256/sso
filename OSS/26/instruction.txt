Here's a step-by-step guide to create a simple web form with a MySQL database using Docker, Node.js, and JavaScript:

### Step 1: Set Up Docker Containers for MySQL and Nginx

#### 1.1. Create MySQL Container
We will create a MySQL container with the necessary environment variables and bind the ports.

```bash
docker run --name mysql_mg -e MYSQL_ROOT_PASSWORD=your_password -p 3306:3306 -d mysql
```

- `--name mysql_mg`: Names the container `mysql_mg`.
- `-e MYSQL_ROOT_PASSWORD=your_password`: Sets the root password for MySQL.
- `-p 3306:3306`: Maps the host machine's port `3306` to the container's port `3306`.
- `-d mysql`: Runs the MySQL container in detached mode.

#### 1.2. Create Nginx Container (Optional for serving frontend)
To serve your HTML form with Nginx, run the Nginx container:

```bash
docker run --name nginx_server -p 8080:80 -d nginx
```

This will serve content on `localhost:8080`.

### Step 2: Set Up Node.js Backend with MySQL Database

#### 2.1. Initialize Node.js Project
1. Create a new directory for your project:
   ```bash
   mkdir mysql_form
   cd mysql_form
   ```
2. Initialize a new Node.js project:
   ```bash
   npm init -y
   ```
3. Install necessary dependencies:
   ```bash
   npm install express mysql2
   ```

#### 2.2. Create Server (Backend)
Create a file `server.js`:

```javascript
const express = require('express');
const mysql = require('mysql2');
const bodyParser = require('body-parser');

const app = express();
const port = 3000;

// Setup MySQL connection
const db = mysql.createConnection({
  host: 'localhost',
  user: 'root',
  password: 'your_password',
  database: 'testdb'
});

// Connect to MySQL database
db.connect(err => {
  if (err) {
    console.error('Database connection failed: ' + err.stack);
    return;
  }
  console.log('Connected to database.');
});

// Set up middleware
app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.static('public'));  // Serve static files from 'public' directory

// Route to display form
app.get('/', (req, res) => {
  res.sendFile(__dirname + '/public/index.html');
});

// Route to handle form submission
app.post('/submit', (req, res) => {
  const { name, email } = req.body;
  
  const query = 'INSERT INTO users (name, email) VALUES (?, ?)';
  db.query(query, [name, email], (err, result) => {
    if (err) {
      console.error('Error inserting record: ', err);
      return res.send('Error in inserting record.');
    }
    res.send('Record inserted successfully!');
  });
});

app.listen(port, () => {
  console.log(`Server running at http://localhost:${port}`);
});
```

#### 2.3. Create MySQL Database and Table

To store form data, you need a database and table. Connect to MySQL via CLI or any MySQL client and run the following commands:

```sql
CREATE DATABASE mydatabase;
USE mydatabase;

CREATE TABLE users (
  id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  email VARCHAR(255) NOT NULL
);
```

#### 2.4. Run the Backend Server
Run your Node.js server:

```bash
node server.js
```

Now your backend server is running at `http://localhost:3000`.

### Step 3: Create Frontend Form (HTML)

Create a folder `public` in your project directory and inside it create `index.html` for the form:

```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>MySQL Form</title>
</head>
<body>
  <h1>Insert User Data</h1>
  <form action="/submit" method="POST">
    <label for="name">Name:</label><br>
    <input type="text" id="name" name="name" required><br><br>

    <label for="email">Email:</label><br>
    <input type="email" id="email" name="email" required><br><br>

    <input type="submit" value="Submit">
  </form>
</body>
</html>
```

Now, the form is ready to take input from the user and send it to the backend for insertion into the MySQL database.

### Step 4: Connect Frontend and Backend

- The form sends data to the backend at the `/submit` route, which will insert the record into MySQL.
- The backend uses the MySQL credentials to insert the form data into the `users` table in `testdb`.

### Step 5: Access the Application

1. Open the `index.html` form by navigating to `http://localhost:8080` (if using Nginx).
2. Fill in the form and submit it.
3. After submission, the backend should insert the data into the MySQL database.

You can verify the insertion by querying the `users` table in MySQL.

### Troubleshooting

1. **If MySQL is not connecting**: Ensure the MySQL container is running properly and that the host, username, password, and database name are correct in the backend configuration.
2. **Database Errors**: Double-check the MySQL queries and ensure the database and tables exist.

This should complete your project setup. Let me know if you encounter any issues!
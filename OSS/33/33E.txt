33 .   Create & Demonstrate the containers of a particular distro and show all Docker compose file fields. With example


# Two Container Setup Guide (Ubuntu + Nginx)

## 1. Create Project Directory Structure
```bash
# Create main project directory
mkdir docker-two-containers
cd docker-two-containers

# Create required subdirectories
mkdir app nginx
```

## 2. Create Required Files

### 2.1 Create docker-compose.yml
```yaml
version: '3.8'

services:
  web-app:
    build:
      context: .
      dockerfile: Dockerfile.ubuntu
    container_name: ubuntu-app
    ports:
      - "8080:80"
    networks:
      - app-net

  nginx-proxy:
    image: nginx:latest
    container_name: nginx-front
    ports:
      - "80:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - web-app
    networks:
      - app-net

networks:
  app-net:
    driver: bridge
```

### 2.2 Create Dockerfile.ubuntu
```dockerfile
FROM ubuntu:latest

RUN apt-get update && apt-get install -y nginx

COPY app/index.html /var/www/html/

CMD ["nginx", "-g", "daemon off;"]
```

### 2.3 Create index.html in app directory
```bash
echo "<h1>Hello from Ubuntu container</h1>" > app/index.html
```

### 2.4 Create nginx/default.conf
```bash
cat > nginx/default.conf << 'EOF'
server {
    listen 80;
    location / {
        proxy_pass http://web-app:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }
}
EOF
```

## 3. Final Directory Structure
Your directory should look like this:
```
docker-two-containers/
├── app/
│   └── index.html
├── nginx/
│   └── default.conf
├── docker-compose.yml
└── Dockerfile.ubuntu
```

## 4. Running the Containers
```bash
# Build and start containers
docker-compose up -d

# Verify containers are running
docker-compose ps

# Check logs if needed
docker-compose logs
```

## 5. Testing
- Open http://localhost:8080 to access Ubuntu container directly
- Open http://localhost to access through Nginx proxy

## 6. Useful Commands
```bash
# Stop containers
docker-compose down

# Rebuild and start
docker-compose up -d --build

# View logs
docker-compose logs -f

# Stop and remove everything
docker-compose down --volumes --remove-orphans
```
